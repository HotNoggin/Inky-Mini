-- Prepare a table for the api module and memory
local memapi = {}

local ffi = require("ffi")

memapi.default_font = "007e464a52627e007733770077577500003c7e7e7e7e3c00007e7e7e7e7e7e0000183c7e7e3c18000060787e7e786000006c7c3e3e7c6c00007c761e1e767c001c1c7f7d7f1c1c001c147f7f7f1c1c001c1c7f5f7f1c1c001c1c7f7f7f141c003e7f6b776b7f3e003e7f636b637f3e001c147f5d7f141c00007e3e1e3e766200005c44445c505c000058444448504c000050484448504800005850585c585c0000444c5e5e4c440000c0f0f8fcfcfefefefefcfcf8f0c00070f0f0e0f0f8f878c3810018180081c300003c3c3c3c000000000000000000000000000000000000000000000000000000030f1f3f3f7f7f7f7f3f3f1f0f0300003e6a5e5e6a3e0000000000000000000000005e5e000000000e0e000e0e0000247e7e247e7e2400005c5cd6d6747400006676381c6e660000787e4a7e3848000000000e0e00000000003c7e660000000000667e3c0000000054387c385400000018187e7e181800000040606000000000181818181818000000006060000000006070381c0e0600003c7e524a7e3c000040447e7e404000006476725a5e4c00002466424a7e3400001e1e10107e7e00002e6e4a4a7a3200003c7e4a4a7a3000000606727a0e060000347e4a4a7e3400000c5e52527e3c000000006c6c0000000000406c6c0000000000183c7e660000006c6c6c6c6c6c000000667e3c180000000406525a1e0c00007c82baaab23c00007c7e0a0a7e7c00007e7e4a4a7e3400003c7e4242662400007e7e42427e3c00007e7e4a4a424200007e7e0a0a020200003c7e424a7a3800007e7e08087e7e000042427e7e42420000307040427e3e00007e7e181c7e7600007e7e4040606000007e7e060c067e00007e7e0c187e7e00003c7e42427e3c00007e7e12121e0c00003c7e4262febc00007e7e0a0a7e7400002c4e5a5a7234000002027e7e020200003e7e40407e3e00000e3e78703e0e00003e7e6030603e0000767e08087e760000060e7c780e06000062727a5e4e460000007e7e4242000000060e1c38706000000042427e7e000000080c0e060c080000404040404040000000060e0c00000000387c44443c7c00007f7f44447c380000387c44446c280000387c44447f7f0000387c54545c180000087e7f090b02000098bca4a4fcf800007f7f04047c78000044447d7d404000008080fdfd000000007f7f081c7e76000040417f7f40400000787c0c180c7800007c7804047c780000387c44447c380000fcf844447c380000387c4444fcfc80007c7804041c180000585c545474300000043e7e44440000003c7c40407c7c00001c3c70603c1c00003c7c6030603c00006c7c10107c6c00009cbca0a0fcfc00006474745c5c4c000000087e764200000000007e7e000000000042767e0800000010081818100800007e5a66665a7e
-- The addresses of specific areas of memory
memapi.map = {
    memory_start = 0x000, memory_end = 0xfff, -- The entirety of the memory
    write_start  = 0x000, write_end  = 0xfff, -- The writable memory block
    font_start   = 0x000, font_end   = 0x7ff, -- 2048 bytes for 128 to 256 chars
    save_start   = 0x400, save_end   = 0x7ff, -- 1024 bytes of font for save data
    sounds_start = 0x800, sounds_end = 0x9ff, -- 512 bytes for 32-byte sounds
    audio_start  = 0xa00, audio_end  = 0xbff, -- 512 bytes for audio buffer
    ascii_start  = 0xc00, ascii_end  = 0xcff, -- 256 bytes for ascii char grid
    color_start  = 0xd00, color_end  = 0xdff, -- 256 bytes for 4-bit color grid
    bonus_start  = 0xe00, bonus_end  = 0xfff, -- 512 bytes for multiple uses
}


-- Create a new, 4Kib memory buffer
function memapi.init()
    print("Creating memory buffer")
    memapi.bytes = love.data.newByteData(0x1000) -- New 4Kib buffer
    memapi.ptr = ffi.cast('uint8_t*', memapi.bytes:getFFIPointer()) -- Byte pointer
    memapi.load_font(memapi.default_font)
end


-- Loads font from a hexadecimal string
function memapi.load_font(font)
    print("Loading font")
    local font_size = memapi.map.font_end - memapi.map.font_start
    for i = 0, font_size do
        local lchar = string.sub(font, i * 2 + 1, i * 2 + 1)
        local rchar = string.sub(font, i * 2 + 2, i * 2 + 2)
        local left = memapi.hex(lchar)
        local right = memapi.hex(rchar)
        local byte = bit.bor(bit.lshift(left, 4), right)
        memapi.poke(i + memapi.map.font_start, byte)
    end
end


-- Get the byte at the specified address
function memapi.peek(address)
    if not type(address) == "number" then return end
    if address < memapi.map.memory_start or address > memapi.map.memory_end then
        error("Attempted to access out of bounds memory at " .. address)
    end

    return memapi.ptr[address]
end


-- Set the byte at the specified address
function memapi.poke(address, value)
    if not type(address) == "number" then return end
    if not type(value) == "number" then return end

    if address < memapi.map.write_start and address > memapi.map.write_end then
        error("Attempted to write to read only memory at " .. address)
    end

    memapi.ptr[address] = value
end


function memapi.hex(str)
    return tonumber(str, 16)
end


function memapi.hexchar(num)
    return string.format("%x", num)
end


-- Export the modele as a table
return memapi